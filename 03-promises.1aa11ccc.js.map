{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,kBAAmBF,SAASC,cAAc,kBAC1CE,iBAAkBH,SAASC,cAAc,iBACzCG,mBAAoBJ,SAASC,cAAc,oBAgC7C,SAASI,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SACNN,E,MACAC,IAGFM,EAAO,C,SACLP,E,MACAC,GACA,GAEHA,EAAM,G,CA7CbT,EAAKC,KAAKgB,iBAAiB,UAE3B,SAAsBC,GACpBA,EAAEC,iBAEF,MAAMC,EAAeC,OAAOrB,EAAKI,kBAAkBkB,OAC7CC,EAAcF,OAAOrB,EAAKK,iBAAiBiB,OAC3CE,EAAgBH,OAAOrB,EAAKM,mBAAmBgB,OAErD,IAAK,IAAIG,EAAW,EAAGA,EAAWD,EAAeC,IAC/ClB,EAAckB,EAAW,EAAGL,EAAeG,EAAcE,GACxDC,MAAK,EAAClB,SACLA,EAAQC,MACRA,MAEAkB,QAAQC,IAAI,KACZ9B,EAAA+B,OAAOC,QAAQ,qBAAqBtB,QAAeC,MAAU,IAE9DsB,OAAM,EAACvB,SACNA,EAAQC,MACRA,MAEAkB,QAAQC,IAAI,KACZ9B,EAAA+B,OAAOG,QAAQ,oBAAoBxB,QAAeC,MAAU,G","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from \"notiflix/build/notiflix-notify-aio\";\n\nconst refs = {\n  form: document.querySelector(\".form\"),\n  promiseDelayInput: document.querySelector(\"[name=\\\"delay\\\"]\"),\n  promiseStepInput: document.querySelector(\"[name=\\\"step\\\"]\"),\n  promiseAmountInput: document.querySelector(\"[name=\\\"amount\\\"]\"),\n};\n\nrefs.form.addEventListener(\"submit\", onFormSubmit);\n\nfunction onFormSubmit(e) {\n  e.preventDefault();\n\n  const promiseDelay = Number(refs.promiseDelayInput.value);\n  const promiseStep = Number(refs.promiseStepInput.value);\n  const promiseAmount = Number(refs.promiseAmountInput.value);\n\n  for (let curIndex = 0; curIndex < promiseAmount; curIndex++) {\n    createPromise(curIndex + 1, promiseDelay + promiseStep * curIndex)\n    .then(({\n      position,\n      delay,\n    }) => {\n      console.log(123);\n      Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n    })\n    .catch(({\n      position,\n      delay,\n    }) => {\n      console.log(456);\n      Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n    });\n  }\n  ;\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({\n          position,\n          delay,\n        });\n      } else {\n        reject({\n          position,\n          delay,\n        });\n      }\n    }, delay);\n  });\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$refs","form","document","querySelector","promiseDelayInput","promiseStepInput","promiseAmountInput","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","e","preventDefault","promiseDelay","Number","value","promiseStep","promiseAmount","curIndex","then","console","log","Notify","success","catch","failure"],"version":3,"file":"03-promises.1aa11ccc.js.map"}